struct的用处

1、按照指定格式将Python数据转换为字符串,该字符串为字节流,如网络传输时,不能传输int,此时先将int转化为字节流,然后再发送;
2、按照指定格式将字节流转换为Python指定的数据类型;
3、处理二进制数据,如果用struct来处理文件的话,需要用’wb’,’rb’以二进制(字节流)写,读的方式来处理文件;
4、处理c语言中的结构体;

主要函数

1、pack(fmt, v1, v2,....)，返回值string

按照给定的格式(fmt),把数据转换成字符串(字节流),并将该字符串返回。

2、pack_into(fmt, buffer, offset, v1, v2,...)，无返回值

按照给定的格式(fmt),将数据转换成字符串(字节流), 并将字节流写入以offset开始的buffer中。

3、unpack(fmt, v1, v2,...)，返回值tuple

按照给定的格式(fmt)解析字节流,并返回解析结果

4、unpack_from(fmt, buffer, offset)，返回值tuple

按照给定的格式(fmt)解析以offset开始的buffer,并返回解析结果

5、calcsize(fmt) 返回值整型

计算给定的格式(fmt)占用多少字节的内存，注意对齐方式

常见的格式符

！：大端存储
c: char
B： 一个字节长度，unsigned char.
H：两个字节，16位
I： 4个字节，int型
Q: 64bits
x: padding
3x：3个字节的padding
5s: 5字节的字符串

注：“端”指定了数据在存储器中存放顺序的顺序，分度值为byte,即byte都是按照正常顺序,但是byte组装成的int时byte的顺序则不同。其中大端为较低的有效字节存放在较高的存储器地址中，较高的有效字节存放在较低的存储器地址，而小端是较高的有效字节存放在较高的存储器地址中，较低的有效字节存放在较低的存储器地址。
